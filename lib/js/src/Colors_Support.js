// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_sys = require("bs-platform/lib/js/caml_sys.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var notFoundStr = "NOT_FOUND";

function safeGetEnv(str) {
  try {
    return Caml_sys.caml_sys_getenv(str);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return notFoundStr;
    } else {
      throw exn;
    }
  }
}

function getOS() {
  return "Unix";
}

function convertEnvToBool(str) {
  var match = +(safeGetEnv(str) !== notFoundStr);
  if (match !== 0) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function isTerminal256() {
  var termEnv = safeGetEnv("TERM");
  var match = +(termEnv !== notFoundStr);
  if (match !== 0) {
    var re = (/-256(color)?$/i);
    var match_ = termEnv.match(re);
    if (match_ !== null) {
      return 2;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}

function isFancyTerminal() {
  var termEnv = safeGetEnv("TERM_PROGRAM");
  var match = +(termEnv !== notFoundStr);
  if (match !== 0) {
    var version = Caml_format.caml_int_of_string(Caml_array.caml_array_get(safeGetEnv("TERM_PROGRAM_VERSION").split("."), 0));
    switch (termEnv) {
      case "Apple_Terminal" : 
          return 2;
      case "Hyper" : 
          return 3;
      case "iTerm.app" : 
          var match$1 = +(version >= 3);
          if (match$1 !== 0) {
            return 3;
          } else {
            return 2;
          }
      default:
        return 0;
    }
  } else {
    return 2;
  }
}

function isBasicTerminal() {
  var termEnv = safeGetEnv("TERM");
  var match = +(termEnv !== notFoundStr);
  if (match !== 0) {
    var re = (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i);
    var match_ = termEnv.match(re);
    if (match_ !== null) {
      return 1;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}

function isColorTerm() {
  var match = +(safeGetEnv("COLORTERM") !== notFoundStr);
  if (match !== 0) {
    return 1;
  } else {
    return 0;
  }
}

function isTeamCityCompatible() {
  var termEnv = safeGetEnv("TEAMCITY_VERSION");
  var match = +(termEnv !== notFoundStr);
  if (match !== 0) {
    var re = (/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/);
    var match_ = termEnv.match(re);
    if (match_ !== null) {
      return 1;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}

function isColorCompatibleCi() {
  var termEnv = safeGetEnv("CI");
  var match = +(termEnv !== notFoundStr);
  if (match !== 0) {
    var arr = $$Array.of_list(/* :: */[
          "TRAVIS",
          /* :: */[
            "CIRCLECI",
            /* :: */[
              "APPVEYOR",
              /* :: */[
                "GITLAB_CI",
                /* [] */0
              ]
            ]
          ]
        ]);
    var supportedCI = +arr.some((function (x) {
            return +(termEnv === x);
          }));
    var isCodeShip = +(safeGetEnv("CI_NAME") === "codeship");
    var match$1 = supportedCI || isCodeShip;
    if (match$1 !== 0) {
      return 1;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}

function supportsColors() {
  console.log("IS CI");
  var ci = isColorCompatibleCi(/* () */0);
  console.log(ci);
  var tc = isTeamCityCompatible(/* () */0);
  console.log("IS TEAM CITY");
  console.log(tc);
  console.log("IS FANCY TERMINAL");
  console.log(isFancyTerminal(/* () */0));
  return /* () */0;
}

supportsColors(/* () */0);

exports.notFoundStr = notFoundStr;
exports.safeGetEnv = safeGetEnv;
exports.getOS = getOS;
exports.convertEnvToBool = convertEnvToBool;
exports.isTerminal256 = isTerminal256;
exports.isFancyTerminal = isFancyTerminal;
exports.isBasicTerminal = isBasicTerminal;
exports.isColorTerm = isColorTerm;
exports.isTeamCityCompatible = isTeamCityCompatible;
exports.isColorCompatibleCi = isColorCompatibleCi;
exports.supportsColors = supportsColors;
/*  Not a pure module */

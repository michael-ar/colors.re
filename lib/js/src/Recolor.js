// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry      = require("bs-platform/lib/js/curry.js");
var Styles     = require("./Styles.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function startWrap(v) {
  return "\u001b[" + (String(v) + "") + "m";
}

function endWrap(v) {
  return "\u001b[" + (String(v) + "") + "m";
}

function compose(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function pipe(f, g, x) {
  return Curry._1(g, Curry._1(f, x));
}

function reset(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* reset */0], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* reset */0], 1)));
}

function bold(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* bold */1], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* bold */1], 1)));
}

function dim(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* dim */2], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* dim */2], 1)));
}

function italic(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* italic */3], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* italic */3], 1)));
}

function underline(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* underline */4], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* underline */4], 1)));
}

function inverse(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* inverse */5], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* inverse */5], 1)));
}

function hidden(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* hidden */6], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* hidden */6], 1)));
}

function strikethrough(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* strikethrough */7], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* strikethrough */7], 1)));
}

function black(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* black */8], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* black */8], 1)));
}

function red(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* red */9], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* red */9], 1)));
}

function green(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* green */10], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* green */10], 1)));
}

function yellow(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* yellow */11], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* yellow */11], 1)));
}

function blue(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* blue */12], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* blue */12], 1)));
}

function magenta(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* magenta */13], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* magenta */13], 1)));
}

function cyan(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* cyan */14], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* cyan */14], 1)));
}

function white(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* white */15], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* white */15], 1)));
}

function gray(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* gray */16], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* gray */16], 1)));
}

function grey(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* grey */17], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* grey */17], 1)));
}

function bgBlack(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* bgBlack */18], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* bgBlack */18], 1)));
}

function bgRed(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* bgRed */19], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* bgRed */19], 1)));
}

function bgGreen(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* bgGreen */20], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* bgGreen */20], 1)));
}

function bgYellow(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* bgYellow */21], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* bgYellow */21], 1)));
}

function bgBlue(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* bgBlue */22], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* bgBlue */22], 1)));
}

function bgMagenta(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* bgMagenta */23], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* bgMagenta */23], 1)));
}

function bgCyan(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* bgCyan */24], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* bgCyan */24], 1)));
}

function bgWhite(str) {
  return startWrap(Caml_array.caml_array_get(Styles.Styles[/* bgWhite */25], 0)) + (str + endWrap(Caml_array.caml_array_get(Styles.Styles[/* bgWhite */25], 1)));
}

var Recolor = /* module */[
  /* compose */compose,
  /* pipe */pipe,
  /* reset */reset,
  /* bold */bold,
  /* dim */dim,
  /* italic */italic,
  /* underline */underline,
  /* inverse */inverse,
  /* hidden */hidden,
  /* strikethrough */strikethrough,
  /* black */black,
  /* red */red,
  /* green */green,
  /* yellow */yellow,
  /* blue */blue,
  /* magenta */magenta,
  /* cyan */cyan,
  /* white */white,
  /* gray */gray,
  /* grey */grey,
  /* bgBlack */bgBlack,
  /* bgRed */bgRed,
  /* bgGreen */bgGreen,
  /* bgYellow */bgYellow,
  /* bgBlue */bgBlue,
  /* bgMagenta */bgMagenta,
  /* bgCyan */bgCyan,
  /* bgWhite */bgWhite
];

function changeColor(c, str) {
  switch (c) {
    case 0 : 
        return red(str);
    case 1 : 
        return yellow(str);
    case 2 : 
        return green(str);
    case 3 : 
        return blue(str);
    case 4 : 
        return white(str);
    case 5 : 
        return cyan(str);
    case 6 : 
        return magenta(str);
    
  }
}

function modify(m, str) {
  switch (m) {
    case 0 : 
        return reset(str);
    case 1 : 
        return bold(str);
    case 2 : 
        return dim(str);
    case 3 : 
        return italic(str);
    case 4 : 
        return underline(str);
    case 5 : 
        return inverse(str);
    case 6 : 
        return hidden(str);
    case 7 : 
        return strikethrough(str);
    
  }
}

function changeKeyword(keyword, str, color) {
  var containsString = +str.includes(keyword);
  if (containsString !== 0) {
    return str.replace(keyword, changeColor(color, keyword));
  } else {
    return str;
  }
}

function changeColor$1(color, keywordOptions, str) {
  if (color) {
    var c = color[0];
    if (keywordOptions) {
      var word = keywordOptions[0][/* word */1];
      return str.split(" ").map((function (x) {
                      var match = +(x === word);
                      if (match !== 0) {
                        return x;
                      } else {
                        return changeColor(c, x);
                      }
                    })).join(" ");
    } else {
      return changeColor(c, str);
    }
  } else {
    return str;
  }
}

function doModifier(modifier, str) {
  if (modifier) {
    return modify(modifier[0], str);
  } else {
    return str;
  }
}

function highlightKeyword(options, str) {
  if (options) {
    var match = options[0];
    return changeKeyword(match[/* word */1], str, match[/* colorType */0]);
  } else {
    return str;
  }
}

function changeBackground(c, str) {
  switch (c) {
    case 0 : 
        return bgRed(str);
    case 1 : 
        return bgYellow(str);
    case 2 : 
        return bgGreen(str);
    case 3 : 
        return bgBlue(str);
    case 4 : 
        return bgWhite(str);
    case 5 : 
        return bgCyan(str);
    case 6 : 
        return bgMagenta(str);
    
  }
}

function applyBackgroud(bg, str) {
  if (bg) {
    return changeBackground(bg[0], str);
  } else {
    return str;
  }
}

function recolor(color, bg, modifier, keywordOptions, str) {
  return applyBackgroud(bg, changeColor$1(color, keywordOptions, doModifier(modifier, highlightKeyword(keywordOptions, str))));
}

var myString = recolor(/* Some */[/* Red */0], /* Some */[/* White */4], /* Some */[/* Bold */1], /* Some */[/* record */[
        /* colorType : Blue */3,
        /* word */"my"
      ]], "this is my string");

console.log(myString);

exports.startWrap        = startWrap;
exports.endWrap          = endWrap;
exports.Recolor          = Recolor;
exports.modify           = modify;
exports.changeKeyword    = changeKeyword;
exports.changeColor      = changeColor$1;
exports.doModifier       = doModifier;
exports.highlightKeyword = highlightKeyword;
exports.changeBackground = changeBackground;
exports.applyBackgroud   = applyBackgroud;
exports.recolor          = recolor;
exports.myString         = myString;
/* myString Not a pure module */

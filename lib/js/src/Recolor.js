// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                   = require("bs-platform/lib/js/curry.js");
var Utils                   = require("./Utils.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function changeColor(c, str) {
  var exit = 0;
  switch (c) {
    case 0 : 
        return Curry._1(Utils.Utils[/* red */11], str);
    case 1 : 
        return Curry._1(Utils.Utils[/* yellow */13], str);
    case 2 : 
        return Curry._1(Utils.Utils[/* green */12], str);
    case 3 : 
        return Curry._1(Utils.Utils[/* blue */14], str);
    case 4 : 
        return Curry._1(Utils.Utils[/* white */17], str);
    case 5 : 
        return Curry._1(Utils.Utils[/* cyan */16], str);
    case 6 : 
        return Curry._1(Utils.Utils[/* magenta */15], str);
    case 7 : 
    case 8 : 
    case 9 : 
    case 10 : 
    case 11 : 
    case 12 : 
    case 13 : 
    case 14 : 
    case 15 : 
    case 16 : 
    case 17 : 
    case 18 : 
    case 19 : 
    case 20 : 
    case 21 : 
        exit = 1;
        break;
    
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/cabbio540/Sites/personal/re-color/src/Recolor.re",
            43,
            2
          ]
        ];
  }
  
}

function modify(m, str) {
  switch (m) {
    case 0 : 
        return Curry._1(Utils.Utils[/* reset */2], str);
    case 1 : 
        return Curry._1(Utils.Utils[/* bold */3], str);
    case 2 : 
        return Curry._1(Utils.Utils[/* dim */4], str);
    case 3 : 
        return Curry._1(Utils.Utils[/* italic */5], str);
    case 4 : 
        return Curry._1(Utils.Utils[/* underline */6], str);
    case 5 : 
        return Curry._1(Utils.Utils[/* inverse */7], str);
    case 6 : 
        return Curry._1(Utils.Utils[/* hidden */8], str);
    case 7 : 
        return Curry._1(Utils.Utils[/* strikethrough */9], str);
    
  }
}

function changeKeyword(keyword, str, color) {
  var containsString = +str.includes(keyword);
  if (containsString !== 0) {
    return str.replace(keyword, changeColor(color, keyword));
  } else {
    return str;
  }
}

function doColorChange(color, keywordOptions, str) {
  if (color) {
    var c = color[0];
    if (keywordOptions) {
      var word = keywordOptions[0][/* word */1];
      return str.split(" ").map((function (x) {
                      var match = +(x === word);
                      if (match !== 0) {
                        return x;
                      } else {
                        return changeColor(c, x);
                      }
                    })).join(" ");
    } else {
      return changeColor(c, str);
    }
  } else {
    return str;
  }
}

function doModifier(modifier, str) {
  if (modifier) {
    return modify(modifier[0], str);
  } else {
    return str;
  }
}

function highlightKeyword(options, str) {
  if (options) {
    var match = options[0];
    return changeKeyword(match[/* word */1], str, match[/* colorType */0]);
  } else {
    return str;
  }
}

function changeBackground(c, str) {
  switch (c) {
    case 7 : 
        return Curry._1(Utils.Utils[/* bgBlack */20], str);
    case 0 : 
    case 8 : 
        return Curry._1(Utils.Utils[/* bgRed */21], str);
    case 2 : 
    case 9 : 
        return Curry._1(Utils.Utils[/* bgGreen */22], str);
    case 1 : 
    case 10 : 
        return Curry._1(Utils.Utils[/* bgYellow */23], str);
    case 3 : 
    case 11 : 
        return Curry._1(Utils.Utils[/* bgBlue */24], str);
    case 6 : 
    case 12 : 
        return Curry._1(Utils.Utils[/* bgMagenta */25], str);
    case 5 : 
    case 13 : 
        return Curry._1(Utils.Utils[/* bgCyan */26], str);
    case 4 : 
    case 14 : 
        return Curry._1(Utils.Utils[/* bgWhite */27], str);
    case 15 : 
        return Curry._1(Utils.Utils[/* bgRedBright */29], str);
    case 16 : 
        return Curry._1(Utils.Utils[/* bgGreenBright */30], str);
    case 17 : 
        return Curry._1(Utils.Utils[/* bgYellowBright */31], str);
    case 18 : 
        return Curry._1(Utils.Utils[/* bgBlueBright */32], str);
    case 19 : 
        return Curry._1(Utils.Utils[/* bgMagentaBright */33], str);
    case 20 : 
        return Curry._1(Utils.Utils[/* bgCyanBright */34], str);
    case 21 : 
        return Curry._1(Utils.Utils[/* bgWhiteBright */35], str);
    
  }
}

function applyBackgroud(bg, str) {
  if (bg) {
    return changeBackground(bg[0], str);
  } else {
    return str;
  }
}

function recolor(color, bg, modifier, keywordOptions, str) {
  return applyBackgroud(bg, doColorChange(color, keywordOptions, doModifier(modifier, highlightKeyword(keywordOptions, str))));
}

var myString = recolor(/* Some */[/* White */4], /* Some */[/* BgBlueBright */18], /* Some */[/* Bold */1], /* Some */[/* record */[
        /* colorType : Green */2,
        /* word */"my"
      ]], "this is my string");

console.log(myString);

exports.changeColor      = changeColor;
exports.modify           = modify;
exports.changeKeyword    = changeKeyword;
exports.doColorChange    = doColorChange;
exports.doModifier       = doModifier;
exports.highlightKeyword = highlightKeyword;
exports.changeBackground = changeBackground;
exports.applyBackgroud   = applyBackgroud;
exports.recolor          = recolor;
exports.myString         = myString;
/* myString Not a pure module */

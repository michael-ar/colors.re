// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Colors_Utils = require("../src/Colors_Utils.js");

var $less$less = Colors_Utils.Colors_Utils[/* compose */0];

var $great$great = Colors_Utils.Colors_Utils[/* pipe */1];

var partial_arg = Colors_Utils.Colors_Utils[/* green */12];

var partial_arg$1 = Colors_Utils.Colors_Utils[/* underline */6];

var partial_arg$2 = Colors_Utils.Colors_Utils[/* bgBlue */24];

var partial_arg$3 = Colors_Utils.Colors_Utils[/* bold */3];

function partial_arg$4(param) {
  return $less$less(partial_arg$3, partial_arg$2, param);
}

function partial_arg$5(param) {
  return $less$less(partial_arg$4, partial_arg$1, param);
}

function composedStyle(param) {
  return $less$less(partial_arg$5, partial_arg, param);
}

console.log(composedStyle("This string will be bold, underlined with a blue background with green text"));

describe("colors.re Colors_Utils and Styles", (function () {
        Jest.test("startWrap", (function () {
                return Jest.ExpectJs[/* toBe */2]("\u001b[start" + "m", Jest.ExpectJs[/* expect */0](Colors_Utils.startWrap("start")));
              }));
        Jest.test("endWrap", (function () {
                return Jest.ExpectJs[/* toBe */2]("\u001b[end" + "m", Jest.ExpectJs[/* expect */0](Colors_Utils.endWrap("end")));
              }));
        Jest.test("bold", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[1m' + 'bold' + '\u001b[22m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bold */3], "bold")));
              }));
        Jest.test("italic", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[3m' + 'test' + '\u001b[23m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* italic */5], "test")));
              }));
        Jest.test("underline", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[4m' + 'test' + '\u001b[24m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* underline */6], "test")));
              }));
        Jest.test("inverse", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[7m' + 'test' + '\u001b[27m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* inverse */7], "test")));
              }));
        Jest.test("hidden", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[8m' + 'test' + '\u001b[28m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* hidden */8], "test")));
              }));
        Jest.test("strikethrough", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[9m' + 'test' + '\u001b[29m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* strikethrough */9], "test")));
              }));
        Jest.test("black", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[30m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* black */10], "test")));
              }));
        Jest.test("red", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[31m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* red */11], "test")));
              }));
        Jest.test("green", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[32m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* green */12], "test")));
              }));
        Jest.test("yellow", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[33m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* yellow */13], "test")));
              }));
        Jest.test("blue", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[34m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* blue */14], "test")));
              }));
        Jest.test("magenta", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[35m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* magenta */15], "test")));
              }));
        Jest.test("cyan", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[36m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* cyan */16], "test")));
              }));
        Jest.test("white", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[37m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* white */17], "test")));
              }));
        Jest.test("gray", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[90m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* gray */18], "test")));
              }));
        Jest.test("grey", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[90m' + 'test' + '\u001b[39m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* grey */19], "test")));
              }));
        Jest.test("bgBlack", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[40m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgBlack */20], "test")));
              }));
        Jest.test("bgRed", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[41m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgRed */21], "test")));
              }));
        Jest.test("bgGreen", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[42m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgGreen */22], "test")));
              }));
        Jest.test("bgYellow", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[43m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgYellow */23], "test")));
              }));
        Jest.test("bgBlue", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[44m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgBlue */24], "test")));
              }));
        Jest.test("bgMagenta", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[45m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgMagenta */25], "test")));
              }));
        Jest.test("bgCyan", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[46m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgCyan */26], "test")));
              }));
        Jest.test("bgWhite", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[47m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgWhite */27], "test")));
              }));
        Jest.test("bgBlackBright", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[100m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgBlackBright */28], "test")));
              }));
        Jest.test("bgRedBright", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[101m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgRedBright */29], "test")));
              }));
        Jest.test("bgGreenBright", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[102m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgGreenBright */30], "test")));
              }));
        Jest.test("bgYellowBright", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[103m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgYellowBright */31], "test")));
              }));
        Jest.test("bgBlueBright", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[104m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgBlueBright */32], "test")));
              }));
        Jest.test("bgMagentaBright", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[105m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgMagentaBright */33], "test")));
              }));
        Jest.test("bgCyanBright", (function () {
                return Jest.ExpectJs[/* toBe */2](( '\u001b[106m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgCyanBright */34], "test")));
              }));
        return Jest.test("bgWhiteBright", (function () {
                      return Jest.ExpectJs[/* toBe */2](( '\u001b[107m' + 'test' + '\u001b[49m' ), Jest.ExpectJs[/* expect */0](Curry._1(Colors_Utils.Colors_Utils[/* bgWhiteBright */35], "test")));
                    }));
      }));

exports.$less$less = $less$less;
exports.$great$great = $great$great;
exports.composedStyle = composedStyle;
/*  Not a pure module */
